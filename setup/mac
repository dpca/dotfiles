#!/bin/sh

# Setup script inspired by thoughtbot/laptop
# https://github.com/thoughtbot/laptop

reset="\e[0m"
red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
cyan="\e[0;36m"
white="\e[0;37m"

fancy_echo() {
  local color=${2:-$cyan}
  local fmt="$color$1$reset"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

npm_install_with_peer_deps() {
  npm info "$1@latest" peerDependencies --json | command sed 's/[\{\},]//g ; s/: /@/g' | xargs npm install -g "$1@latest"
}

# Stop execution if a command errors
set -e

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --global

# oh-my-zsh
if [ ! -d "$HOME/.oh-my-zsh/" ]; then
  fancy_echo "Installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

fancy_echo "Configuring Ruby..."
ruby_version="$(find_latest_ruby)"
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
gem_install_or_update 'rubocop'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing node modules..."
npm install -g eslint create-react-app eslint-plugin-html flow-bin
npm_install_with_peer_deps eslint-config-airbnb
npm_install_with_peer_deps eslint-config-react-app

fancy_echo "Installing dotfiles..."
env RCRC=$HOME/dotfiles/rcrc rcup

if [ ! -d "$HOME/.powerline-fonts/" ]; then
  fancy_echo "Installing powerline fonts..."
  git clone https://github.com/powerline/fonts $HOME/.powerline-fonts
  sh $HOME/.powerline-fonts/install.sh
fi

if [ ! -d "$HOME/.vim/undo/" ]; then
  fancy_echo "Creating ~/.vim/undo"
  mkdir -p ~/.vim/undo
fi

if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  fancy_echo "Installing Tmux Plugin Manager"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

if [ "$(defaults read com.apple.finder AppleShowAllFiles)" != "YES" ] ; then
  fancy_echo "Setting terminal to show all files"
  defaults write com.apple.finder AppleShowAllFiles YES
  killall Finder
fi

fancy_echo "Setting up git configuration"
if [ -n "$GIT_NAME" ]; then
  git config --global user.name "$GIT_NAME"
else
  fancy_echo "Skipped setting user.name - GIT_NAME not found in env" $yellow
fi
if [ -n "$GIT_EMAIL" ]; then
  git config --global user.email "$GIT_EMAIL"
else
  fancy_echo "Skipped setting user.email - GIT_EMAIL not found in env" $yellow
fi
git config --global core.editor vim
git config --global core.excludesfiles ~/.gitignore_global
git config --global core.hooksPath ~/.git_hooks
git config --global push.default simple
git config --global branch.master.mergeoptions --no-ff
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"

fancy_echo "Success!" $green
