#!/usr/bin/env bash

# ----------------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------------

reset="\\e[0m"
red="\\e[0;31m"
green="\\e[0;32m"
yellow="\\e[0;33m"
cyan="\\e[0;36m"
white="\\e[0;37m"

fancy_echo() {
  local color=${2:-$cyan}
  local fmt="$color$1$reset"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

npm_install_with_peer_deps() {
  npm info "$1@latest" peerDependencies --json \
    | command sed 's/[\{\},]//g ; s/: /@/g' \
    | xargs npm install -g "$1@latest"
}

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

# Stop execution if a command errors
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
HOMEBREW_PREFIX="/usr/local"

# ----------------------------------------------------------------------------
# Terminal
# ----------------------------------------------------------------------------

if [ ! -d "$HOME/.oh-my-zsh/" ]; then
  fancy_echo "Installing oh-my-zsh..."
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  fancy_echo "Installing Tmux Plugin Manager"
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# ----------------------------------------------------------------------------
# Homebrew
# ----------------------------------------------------------------------------

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS \
    'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

  export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file="$DIR/../Brewfile"

# ----------------------------------------------------------------------------
# ASDF
# ----------------------------------------------------------------------------

if [ ! -d "$HOME/.asdf/" ]; then
  fancy_echo "Installing asdf..."
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.1
fi

source "$HOME/.asdf/asdf.sh"

install_asdf_plugin "elixir"
install_asdf_plugin "haskell"
install_asdf_plugin "nodejs"
install_asdf_plugin "python"
install_asdf_plugin "ruby"

# ----------------------------------------------------------------------------
# Ruby
# ----------------------------------------------------------------------------

fancy_echo "Installing latest ruby..."
install_asdf_language "ruby"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing ruby libraries..."
gem_install_or_update 'rubocop'
gem_install_or_update 'reek'
gem_install_or_update 'neovim'
gem_install_or_update 'rcodetools'
gem_install_or_update 'fastri'
gem_install_or_update 'timetrap'

# ----------------------------------------------------------------------------
# Node
# ----------------------------------------------------------------------------

fancy_echo "Installing latest node..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

fancy_echo "Installing node modules..."
npm install -g \
  babel-eslint \
  create-react-app \
  eslint \
  eslint-plugin-html \
  flow-bin \
  flow-language-server \
  neovim \
  prettier \
  javascript-typescript-langserver
npm_install_with_peer_deps eslint-config-airbnb
npm_install_with_peer_deps eslint-config-react-app
npm_install_with_peer_deps eslint-config-prettier
npm_install_with_peer_deps eslint-plugin-flowtype

# ----------------------------------------------------------------------------
# Python
# ----------------------------------------------------------------------------

fancy_echo "Installing latest python..."
install_asdf_language "python"

fancy_echo "Installing python libraries..."
pip2 install --user --upgrade neovim virtualenv
# for nvim-completion-manager
pip3 install --user --upgrade awscli neovim jedi psutil setproctitle flake8 python-language-server

asdf reshim python

# ----------------------------------------------------------------------------
# Elixir
# ----------------------------------------------------------------------------

fancy_echo "Installing latest elixir..."
install_asdf_language "elixir"

# ----------------------------------------------------------------------------
# Haskell
# ----------------------------------------------------------------------------

fancy_echo "Installing latest haskell..."
install_asdf_language "haskell"

if [ ! -d "$HOME/haskell-ide-engine/" ]; then
  fancy_echo "Cloning Haskell IDE engine to ~/haskell-ide-engine"
  git clone https://github.com/haskell/haskell-ide-engine  "$HOME/haskell-ide-engine/"
  cd "$HOME/haskell-ide-engine/"
  git submodule update --init
  stack install
else
  fancy_echo "Updating Haskell IDE engine"
  cd "$HOME/haskell-ide-engine/"
  git pull --rebase
  git submodule update
  stack install
fi

cd "$DIR"

# ----------------------------------------------------------------------------
# Dotfiles setup
# ----------------------------------------------------------------------------

fancy_echo "Installing dotfiles..."
env RCRC="$HOME/dotfiles/rcrc" rcup

# ----------------------------------------------------------------------------
# VIM
# ----------------------------------------------------------------------------

if [ ! -d "$HOME/.vim/undo/" ]; then
  fancy_echo "Creating ~/.vim/undo"
  mkdir -p ~/.vim/undo
fi

if [ ! -d "$HOME/.vim/swap/" ]; then
  fancy_echo "Creating ~/.vim/swap"
  mkdir -p ~/.vim/swap
fi

if [ ! -d "$HOME/.vim/backup/" ]; then
  fancy_echo "Creating ~/.vim/backup"
  mkdir -p ~/.vim/backup
fi

fancy_echo "Symlinking things for neovim"
mkdir -p "$HOME/.config"
ln -s ~/.vim "$HOME/.config/nvim"
ln -s ~/.vimrc "$HOME/.config/nvim/init.vim"

# ----------------------------------------------------------------------------
# System settings
# ----------------------------------------------------------------------------

if [ "$(defaults read com.apple.finder AppleShowAllFiles)" != "YES" ] ; then
  fancy_echo "Setting terminal to show all files"
  defaults write com.apple.finder AppleShowAllFiles YES
  killall Finder
fi

if [ "$(defaults read com.apple.desktopservices DSDontWriteNetworkStores)" != "1" ] ; then
  fancy_echo "Disabling storage of invisible files on network stores"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
fi

fancy_echo "Success!" "$green"

fancy_echo "Next steps:
  - Set GIT_NAME, GIT_EMAIL, HOME_EMAIL in .env in this folder
  - Fill in the following in ~/.gitconfig.local:
    [user]
      name =
      email =
"
